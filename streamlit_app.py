import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, classification_report, roc_auc_score

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Streamlit —Å—Ç—Ä–∞–Ω–∏—Ü—ã ---
st.set_page_config(layout="wide", page_title="–ê–Ω–∞–ª–∏–∑ –∑–µ–º–ª–µ—Ç—Ä—è—Å–µ–Ω–∏–π –≤ –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–π –ê–∑–∏–∏")
st.title("üåç –ê–Ω–∞–ª–∏–∑ –∏ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–µ–º–ª–µ—Ç—Ä—è—Å–µ–Ω–∏–π –≤ –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–π –ê–∑–∏–∏")

# --- –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö ---
# –í Streamlit, –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã, –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ —Ñ–∞–π–ª –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ç–æ–π –∂–µ –ø–∞–ø–∫–µ
@st.cache_data
def load_data(file_path):
    data = pd.read_csv(file_path)
    data['Date'] = pd.to_datetime(data['Date'])
    # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –≤—Å–µ —á–∏—Å–ª–æ–≤—ã–µ —Å—Ç–æ–ª–±—Ü—ã –∏–º–µ—é—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ç–∏–ø
    data['Magnitude'] = pd.to_numeric(data['Magnitude'], errors='coerce')
    data['Depth'] = pd.to_numeric(data['Depth'], errors='coerce')
    data = data.set_index('Date')
    return data

DATA_FILE = 'Central-Asian-earthquake-dataset.csv'
try:
    data = load_data(DATA_FILE)
    df = data.copy()
except FileNotFoundError:
    st.error(f"–§–∞–π–ª –¥–∞–Ω–Ω—ã—Ö '{DATA_FILE}' –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –æ–Ω –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ç–æ–π –∂–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏, —á—Ç–æ –∏ app.py.")
    st.stop()


# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –¥–ª—è DataFrame
df['–û–ø–∏—Å–∞–Ω–∏–µ'] = (
    'Magnitude:' + df['Magnitude'].astype(str) +
    '<br>Depth: ' + df['Depth'].astype(str) + ' –∫–º' 
)


# --- 1. –ê–Ω–∞–ª–∏–∑ –∏ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —á–∞—Å—Ç–æ—Ç—ã ---
st.header("üìä –ê–Ω–∞–ª–∏–∑ —á–∞—Å—Ç–æ—Ç—ã –∑–µ–º–ª–µ—Ç—Ä—è—Å–µ–Ω–∏–π")

col1, col2 = st.columns(2)

# –ú–µ—Å—è—á–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫
with col1:
    st.subheader("–ï–∂–µ–º–µ—Å—è—á–Ω–∞—è —á–∞—Å—Ç–æ—Ç–∞")
    df['month_year'] = df.index.to_period('M')
    monthly_counts = df.groupby('month_year').size().reset_index(name='count')
    monthly_counts['month_year'] = monthly_counts['month_year'].dt.to_timestamp()
    monthly_counts = monthly_counts.set_index('month_year')

    fig_month, ax_month = plt.subplots(figsize=(10, 5))
    ax_month.plot(monthly_counts.index, monthly_counts['count'])
    ax_month.set_title("–ï–∂–µ–º–µ—Å—è—á–Ω–∞—è —á–∞—Å—Ç–æ—Ç–∞ –∑–µ–º–ª–µ—Ç—Ä—è—Å–µ–Ω–∏–π —Å —Ç–µ—á–µ–Ω–∏–µ–º –≤—Ä–µ–º–µ–Ω–∏")
    ax_month.set_xlabel("–î–∞—Ç–∞")
    ax_month.set_ylabel("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–µ–º–ª–µ—Ç—Ä—è—Å–µ–Ω–∏–π")
    ax_month.grid(True, linestyle='--')
    st.pyplot(fig_month)

# –ï–∂–µ–≥–æ–¥–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫
with col2:
    st.subheader("–ï–∂–µ–≥–æ–¥–Ω–∞—è —á–∞—Å—Ç–æ—Ç–∞")
    df['year'] = df.index.to_period('Y') 
    yearly_counts = df.groupby('year').size().reset_index(name='count')
    yearly_counts['year'] = yearly_counts['year'].dt.to_timestamp()
    yearly_counts = yearly_counts.set_index('year')

    fig_year, ax_year = plt.subplots(figsize=(10, 5))
    ax_year.plot(yearly_counts.index, yearly_counts['count'])
    ax_year.set_title("–ï–∂–µ–≥–æ–¥–Ω–∞—è —á–∞—Å—Ç–æ—Ç–∞ –∑–µ–º–ª–µ—Ç—Ä—è—Å–µ–Ω–∏–π —Å —Ç–µ—á–µ–Ω–∏–µ–º –≤—Ä–µ–º–µ–Ω–∏")
    ax_year.set_xlabel("–ì–æ–¥")
    ax_year.set_ylabel("–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–µ–º–ª–µ—Ç—Ä—è—Å–µ–Ω–∏–π")
    ax_year.grid(True, linestyle='--')
    st.pyplot(fig_year)


# --- –ê–Ω–∞–ª–∏–∑ –ø–æ —Å—Ç—Ä–∞–Ω–∞–º –∏ –æ–ø–∏—Å–∞—Ç–µ–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ ---
st.header("üìú –û–ø–∏—Å–∞—Ç–µ–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –∞–Ω–∞–ª–∏–∑ –ø–æ —Å—Ç—Ä–∞–Ω–∞–º")

col3, col4 = st.columns([1, 2])

with col3:
    st.subheader("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–∞–Ω–Ω—ã—Ö")
    st.dataframe(data.describe())

with col4:
    st.subheader("–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Å—Ç—Ä–∞–Ω–∞–º")
    earthquake_counts_by_country = data['Country'].value_counts().reset_index()
    earthquake_counts_by_country.columns = ['Country', 'count']
    st.dataframe(earthquake_counts_by_country)

    fig_country, ax_country = plt.subplots(figsize=(12, 6))
    ax_country.bar(earthquake_counts_by_country['Country'], earthquake_counts_by_country['count'])
    ax_country.set_title('–ß–∞—Å—Ç–æ—Ç–∞ –∑–µ–º–ª–µ—Ç—Ä—è—Å–µ–Ω–∏–π –ø–æ —Å—Ç—Ä–∞–Ω–∞–º')
    ax_country.set_xlabel('–°—Ç—Ä–∞–Ω–∞')
    ax_country.set_ylabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–µ–º–ª–µ—Ç—Ä—è—Å–µ–Ω–∏–π')
    ax_country.tick_params(axis='x', rotation=45)
    plt.tight_layout()
    st.pyplot(fig_country)


# --- 2. –ú–æ–¥–µ–ª—å –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ (–û–±—É—á–µ–Ω–∏–µ) ---
st.header("ü§ñ –ú–æ–¥–µ–ª—å –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ (Random Forest)")

# –¶–µ–ª–µ–≤–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è: 1, –µ—Å–ª–∏ –º–∞–≥–Ω–∏—Ç—É–¥–∞ >= 4.0 (–≤—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫), –∏–Ω–∞—á–µ 0
data['Risk'] = (data['Magnitude'] >= 4.0).astype(int)
y = data['Risk']

# –ü—Ä–∏–∑–Ω–∞–∫–∏: Latitude, Longitude, Depth
X = data[['Latitude', 'Longitude', 'Depth']] 
X = X.fillna(0) 

# –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)

# –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏
st.markdown("**–û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏...**")
model = RandomForestClassifier(n_estimators=100, random_state=42)
model.fit(X_train, y_train)
st.success("–ú–æ–¥–µ–ª—å RandomForest –æ–±—É—á–µ–Ω–∞!")


# --- üîÆ –ù–û–í–´–ô –ë–õ–û–ö: –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ —Ä–∏—Å–∫–∞ ---
st.header("üîÆ –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ —Ä–∏—Å–∫–∞")
st.markdown("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –æ—Ü–µ–Ω–∫—É —Ä–∏—Å–∫–∞ –∑–µ–º–ª–µ—Ç—Ä—è—Å–µ–Ω–∏—è (–†–∏—Å–∫ **1** = –ú–∞–≥–Ω–∏—Ç—É–¥–∞ **>= 4.0**):")

with st.form("prediction_form"):
    # –ü–æ–ª—è –≤–≤–æ–¥–∞ —Å —Ä–∞–∑—É–º–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–π –ê–∑–∏–∏
    col_lat, col_lon, col_depth = st.columns(3)
    
    with col_lat:
        # –¢–∏–ø–∏—á–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω —à–∏—Ä–æ—Ç—ã –¥–ª—è —Ä–µ–≥–∏–æ–Ω–∞
        input_lat = st.number_input("–®–∏—Ä–æ—Ç–∞ (Latitude)", value=38.0, min_value=30.0, max_value=45.0, format="%.4f")
    
    with col_lon:
        # –¢–∏–ø–∏—á–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω –¥–æ–ª–≥–æ—Ç—ã –¥–ª—è —Ä–µ–≥–∏–æ–Ω–∞
        input_lon = st.number_input("–î–æ–ª–≥–æ—Ç–∞ (Longitude)", value=71.0, min_value=60.0, max_value=85.0, format="%.4f")
        
    with col_depth:
        # –ì–ª—É–±–∏–Ω–∞ –≤ –∫–º
        input_depth = st.number_input("–ì–ª—É–±–∏–Ω–∞ (Depth, –∫–º)", value=10.0, min_value=0.0, format="%.2f")

    submitted = st.form_submit_button("–°–¥–µ–ª–∞—Ç—å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ")

    if submitted:
        # –°–æ–∑–¥–∞–Ω–∏–µ DataFrame –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è (–¥–æ–ª–∂–µ–Ω —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å X_train)
        input_data = pd.DataFrame({
            'Latitude': [input_lat],
            'Longitude': [input_lon],
            'Depth': [input_depth]
        })
        
        # –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –∫–ª–∞—Å—Å–∞ –∏ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏
        prediction_class = model.predict(input_data)[0]
        # –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –∫–ª–∞—Å—Å–∞ 1
        prediction_proba = model.predict_proba(input_data)[0, 1]
        
        st.subheader("–†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è:")
        
        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–ª–∞—Å—Å–∞ —Ä–∏—Å–∫–∞
        if prediction_class == 1:
            st.error(f"–ö–ª–∞—Å—Å —Ä–∏—Å–∫–∞: **1 (–í—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫)**")
            st.markdown("–ú–æ–¥–µ–ª—å –ø—Ä–µ–¥—Å–∫–∞–∑—ã–≤–∞–µ—Ç, —á—Ç–æ —ç—Ç–æ –∑–µ–º–ª–µ—Ç—Ä—è—Å–µ–Ω–∏–µ, **—Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ, –±—É–¥–µ—Ç –∏–º–µ—Ç—å –º–∞–≥–Ω–∏—Ç—É–¥—É 4.0 –∏–ª–∏ –≤—ã—à–µ.**")
        else:
            st.success(f"–ö–ª–∞—Å—Å —Ä–∏—Å–∫–∞: **0 (–ù–∏–∑–∫–∏–π —Ä–∏—Å–∫)**")
            st.markdown("–ú–æ–¥–µ–ª—å –ø—Ä–µ–¥—Å–∫–∞–∑—ã–≤–∞–µ—Ç, —á—Ç–æ —ç—Ç–æ –∑–µ–º–ª–µ—Ç—Ä—è—Å–µ–Ω–∏–µ, **—Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ, –±—É–¥–µ—Ç –∏–º–µ—Ç—å –º–∞–≥–Ω–∏—Ç—É–¥—É –Ω–∏–∂–µ 4.0.**")
            
        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏
        st.info(f"–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –∫–ª–∞—Å—Å–∞ 1 (–í—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫): **{prediction_proba:.4f}**")
# -------------------------------------------------------------------------


# --- –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –º–æ–¥–µ–ª–∏ (–û—Ü–µ–Ω–∫–∞) ---
st.header("üéØ –û—Ü–µ–Ω–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –º–æ–¥–µ–ª–∏")

# –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –∫–ª–∞—Å—Å–æ–≤
y_pred = model.predict(X_test)
st.write(f"**–¢–æ—á–Ω–æ—Å—Ç—å (Accuracy):** {accuracy_score(y_test, y_pred):.4f}")

# –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏
y_pred_proba = model.predict_proba(X_test)[:, 1] 

# –†–∞—Å—á–µ—Ç ROC AUC
roc_auc = roc_auc_score(y_test, y_pred_proba)
st.write(f"**ROC AUC Score:** {roc_auc:.4f}")

st.markdown("---")
st.subheader("–î–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏")
report_dict = classification_report(y_test, y_pred, output_dict=True)
report_df = pd.DataFrame(report_dict).transpose().round(2)

# –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –æ—Ç—á–µ—Ç –≤ –≤–∏–¥–µ —Ç–∞–±–ª–∏—Ü—ã Streamlit
st.dataframe(report_df)

st.markdown("---")
st.subheader("–ü—Ä–∏–º–µ—Ä –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ (–ö–ª–∞—Å—Å 1: –í—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫)")
# –°–æ–∑–¥–∞–µ–º DataFrame –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
predictions_df = pd.DataFrame({
    '–§–∞–∫—Ç–∏—á–µ—Å–∫–∏–π —Ä–∏—Å–∫': y_test,
    '–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω—ã–π –∫–ª–∞—Å—Å': y_pred,
    '–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å (–†–∏—Å–∫ 1)': y_pred_proba.round(4)
})

st.dataframe(predictions_df.head(10))

# --- –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∑–∞–ø—É—Å–∫—É ---
st.sidebar.title("–ö–∞–∫ –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ")
st.sidebar.info(
    """
    1. **–°–æ—Ö—Ä–∞–Ω–∏—Ç–µ** —ç—Ç–æ—Ç –∫–æ–¥ –≤ —Ñ–∞–π–ª –ø–æ–¥ –Ω–∞–∑–≤–∞–Ω–∏–µ–º `app.py`.
    2. **–ü–æ–º–µ—Å—Ç–∏—Ç–µ** —Ñ–∞–π–ª –¥–∞–Ω–Ω—ã—Ö `Central-Asian-earthquake-dataset.csv` –≤ —Ç—É –∂–µ –ø–∞–ø–∫—É.
    3. **–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ** –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏:
       ```bash
       pip install -r requirements.txt
       ```
    4. **–ó–∞–ø—É—Å—Ç–∏—Ç–µ** –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏–∑ —Ç–µ—Ä–º–∏–Ω–∞–ª–∞:
       ```bash
       streamlit run app.py
       ```
    """
)
